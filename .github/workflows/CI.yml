name: CI

on:
  push:
    branches:
    - main
  pull_request: {}

jobs:
  linux:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
    steps:
    - uses: actions/checkout@v2
    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install libssl-dev libsasl2-dev pkg-config openssl protobuf-compiler
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.61
    - name: Install dill
      shell: bash
      run: |
        pip install dill
    - name: Rust tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --no-default-features
    - uses: messense/maturin-action@v1
      with:
        rust-toolchain: 1.61
        command: build
        args: --release -o dist --interpreter python${{ matrix.python-version }}
    - name: Run tests
      shell: bash
      run: |
        WHEEL_FILE=$(ls ./dist/*.whl)
        pip install $WHEEL_FILE'[dev]' -v
        pytest pytests
        pytest docs
    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

  linux-arm64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
    container:
      image: docker://messense/rust-musl-cross:aarch64-musl
    steps:
    - uses: actions/checkout@v2
    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y protobuf-compiler
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.61
    - uses: messense/maturin-action@v1
      with:
        rust-toolchain: 1.61
        target: aarch64-unknown-linux-musl
        command: build
        manylinux: 2014
        container: off
        args: --release -o dist --interpreter python${{ matrix.python-version }}
    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

  linux_glibc_227_colab:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
    container: bytewax/glib-2.27-builder:v1
    steps:
    - uses: actions/checkout@v2
    - name: Rust Toolchain
      run: |
        rustup default 1.61
    - name: Cargo Test
      run: |
        cargo test --no-default-features
    - name: Build wheel
      run: |
        maturin build --release -o dist --interpreter python${{ matrix.python-version }}
    - name: Pytest
      run: |
        PATH=`echo $PATH | sed -e "s/3.7/${{ matrix.python-version }}/g"`
        echo $PATH
        which python
        python -V
        pip -V
        WHEEL_FILE=$(ls ./dist/*.whl)
        pip install $WHEEL_FILE'[dev]' -v
        pytest pytests
        pytest docs
    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

  macos_x86:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.61
    - name: Install Protoc
      uses: arduino/setup-protoc@v1
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Install system dependency
      shell: bash
      run: |
        pip install dill
    - name: Rust tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --no-default-features
    - uses: messense/maturin-action@v1
      with:
        rust-toolchain: 1.61
        command: build
        args: --release --no-sdist -o dist --interpreter python${{ matrix.python-version }}
    - name: Run tests
      shell: bash
      run: |
        WHEEL_FILE=$(ls ./dist/*.whl)
        pip install $WHEEL_FILE'[dev]' -v
        pytest pytests
        pytest docs
    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

  macos_arm64:
    runs-on: [self-hosted, macOS, ARM64]
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.61
        target: aarch64-apple-darwin
    - name: Rust tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --no-default-features --target aarch64-apple-darwin
    - name: Run maturin
      shell: bash
      run: |
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)"
        pyenv activate bytewax-${{ matrix.python-version }}
        pip install maturin==0.13.2
        maturin build --release -o dist --target aarch64-apple-darwin --interpreter python${{ matrix.python-version }}
    - name: Run tests
      shell: bash
      run: |
        export OPENSSL_ROOT_DIR=/opt/homebrew/opt/openssl@3/
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)"
        pyenv activate bytewax-${{ matrix.python-version }}
        WHEEL_FILE=$(ls ./dist/*.whl)
        pip install $WHEEL_FILE'[dev]' -v --force-reinstall
        pytest pytests
        pytest docs
    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

  upload:
    name: Store wheels in S3
    runs-on: ubuntu-20.04
    needs: [ linux, linux_glibc_227_colab, macos_x86, macos_arm64 ]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
          path: wheels
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_KEY }}
          aws-region: us-west-2
      - name: Upload files to S3 with AWS CLI
        run: |
          aws s3 sync ./wheels s3://${{ secrets.WHEELS_S3_BUCKET }}/${{ github.sha }} --delete
          aws s3 ls s3://${{ secrets.WHEELS_S3_BUCKET }}/${{ github.sha }}
